# Control we generate correct code for bool fields.
go build -C $BITFIELD_DIR -o $TMPDIR/bitfield
exec $TMPDIR/bitfield -in in.go -out out.go -type A
! stderr .
cmp out.go want.a.go

! exec $TMPDIR/bitfield -in in.go -out out.go -type B
! stdout .
cmp stderr want.b

-- in.go --
package testpkg

type A struct {
	_  uint64 `bitfield:"62"`
	F1 bool   `bitfield:"1"`
}

type B struct {
	_  uint32 `bitfield:"30"`
	F1 bool   `bitfield:"2"`
}

-- want.a.go --
package testpkg

// Code generated by github.com/arl/bitfield. DO NOT EDIT.

type A uint64

func (a A) F1() bool {
	return a&0x4000000000000000 != 0
}

func (a *A) SetF1(val bool) {
	var ival A
	if val {
		ival = 1
	}
	*a &^= 0x4000000000000000
	*a |= ival << 62
}
-- want.b --
bitfield, fatal error:
	field 'F1' can't represent 2 bits with type bool
