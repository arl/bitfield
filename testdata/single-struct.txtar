# Control we generate only the specified struct.
bitfield -in $WORK/in.go -out $WORK/out.go -type B
cmp $WORK/out.go $WORK/want.go

-- in.go --
package testpkg

type A struct {
	CoarseX    uint8 `bitfield:"bits=2"`
	CoarseY    uint8 `bitfield:"bits=3"`
}

type B struct {
	CoarseX    uint8 `bitfield:"bits=3"`
	CoarseY    uint8 `bitfield:"bits=2"`
}

-- want.go --
package testpkg

// Code generated by github.com/arl/bitfield. DO NOT EDIT.

type B uint8

func (s B) CoarseX() uint8 {
	return uint8(s & 0x7)
}

func (s B) SetCoarseX(val uint8) B {
	return s&^0x7 | B(val&0x7)
}

func (s B) CoarseY() uint8 {
	return uint8((s >> 3) & 0x3)
}

func (s B) SetCoarseY(val uint8) B {
	return s&^(0x3<<3) | (B(val&0x3) << 3)
}
