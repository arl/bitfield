# Control we check and use the original field type.
go build -C $BITFIELD_DIR -o $TMPDIR/bitfield
exec $TMPDIR/bitfield -in in.go -type A
! stderr .
cmp stdout want.a.go

exec $TMPDIR/bitfield -in in.go -type B
! stderr .
cmp stdout want.b.go

! exec $TMPDIR/bitfield -in in.go -type C
! stdout .
cmp stderr want.c

! exec $TMPDIR/bitfield -in in.go -type D
! stdout .
cmp stderr want.d

-- in.go --
package testpkg

type A struct {
	F1 uint16 `bitfield:"2"`
	F2 uint8  `bitfield:"3"`
}

type B struct {
	F1 uint16 `bitfield:"16"`
	F2 uint8  `bitfield:"3"`
}

type C struct {
	F1 int   `bitfield:"16"`
	F2 uint8 `bitfield:"3"`
}

type D struct {
	F1 uint32 `bitfield:"33"`
}

-- want.a.go --
package testpkg

// Code generated by github.com/arl/bitfield. DO NOT EDIT.

type A uint8

func (s A) F1() uint16 {
	return uint16(s & 0x3)
}

func (s A) SetF1(val uint16) A {
	return s&^0x3 | A(val&0x3)
}

func (s A) F2() uint8 {
	return uint8((s >> 2) & 0x7)
}

func (s A) SetF2(val uint8) A {
	return s&^(0x7<<2) | (A(val&0x7) << 2)
}
-- want.b.go --
package testpkg

// Code generated by github.com/arl/bitfield. DO NOT EDIT.

type B uint32

func (s B) F1() uint16 {
	return uint16(s & 0xffff)
}

func (s B) SetF1(val uint16) B {
	return s&^0xffff | B(val&0xffff)
}

func (s B) F2() uint8 {
	return uint8((s >> 16) & 0x7)
}

func (s B) SetF2(val uint8) B {
	return s&^(0x7<<16) | (B(val&0x7) << 16)
}
-- want.c --
bitfield, fatal error:
	field 'F1' has an unsupported type int
-- want.d --
bitfield, fatal error:
	field 'F1' can't represent 33 bits with type uint32
