# Control we generate union in order of appearance.
go build -C $BITFIELD_DIR -o $TMPDIR/bitfield
exec $TMPDIR/bitfield -in in.go
! stderr .
cmp stdout want.go

-- in.go --
package testpkg

type A struct {
	F1    uint8 `bitfield:"2,union=a"`
	F2    uint8 `bitfield:"3,union=b"`
	F3    uint8 `bitfield:"3,union=a"`
	F4    uint8 `bitfield:"2,union=b"`
}

-- want.go --
package testpkg

// Code generated by github.com/arl/bitfield. DO NOT EDIT.

type A uint8

func (s A) F1() uint8 {
	return uint8(s & 0x3)
}

func (s A) SetF1(val uint8) A {
	return s&^0x3 | A(val&0x3)
}

func (s A) F3() uint8 {
	return uint8((s >> 2) & 0x7)
}

func (s A) SetF3(val uint8) A {
	return s&^(0x7<<2) | (A(val&0x7) << 2)
}

func (s A) F2() uint8 {
	return uint8(s & 0x7)
}

func (s A) SetF2(val uint8) A {
	return s&^0x7 | A(val&0x7)
}

func (s A) F4() uint8 {
	return uint8((s >> 3) & 0x3)
}

func (s A) SetF4(val uint8) A {
	return s&^(0x3<<3) | (A(val&0x3) << 3)
}
