# Control that we correctly parse mixed struct tags.
go build -C $BITFIELD_DIR -o $TMPDIR/bitfield
exec $TMPDIR/bitfield -in in.go -out out.go -type A
! stderr .
cmp out.go want.go

-- in.go --
package testpkg

type A struct {
	F1 uint8  `bitfield:"3" json:"f2"`
	F2 uint8  `json:"f2" bitfield:"2"`
	F3 uint16 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

-- want.go --
package testpkg

// Code generated by github.com/arl/bitfield. DO NOT EDIT.

type A uint8

func (a A) F1() uint8 {
	return uint8(a & 0x7)
}

func (a *A) SetF1(val uint8) {
	*a &^= 0x7
	*a |= A(val & 0x7)
}

func (a A) F2() uint8 {
	return uint8((a >> 3) & 0x3)
}

func (a *A) SetF2(val uint8) {
	*a &^= 0x3 << 3
	*a |= A(val&0x3) << 3
}
