# Control we catch malformed struct tags.
go build -C $BITFIELD_DIR -o $TMPDIR/bitfield
! exec $TMPDIR/bitfield -in in.go -type A
! stdout .
cmp stderr want.a

! exec $TMPDIR/bitfield -in in.go -type B
! stdout .
cmp stderr want.b

! exec $TMPDIR/bitfield -in in.go -type C
! stdout .
cmp stderr want.c

! exec $TMPDIR/bitfield -in in.go -type D
! stdout .
cmp stderr want.d

! exec $TMPDIR/bitfield -in in.go -type E
! stdout .
cmp stderr want.e

-- in.go --
package testpkg

type A struct {
	F uint8 `json:"f2" bitfield:"bits2"`
}

type B struct {
	F uint8 `json:"f2" bitfield:"bits=2x"`
}

type C struct {
	F uint8 `json:"f2" bitfield:"bits=65"`
}

type D struct {
	F uint8 `json:"f2" bitfield:""`
}

type E struct {
	F uint8 `json:"f2" bitfield:"union=foo"`
}

-- want.a --
bitfield, fatal error:
	field 'F' has a malformed struct tag
-- want.b --
bitfield, fatal error:
	failed to parse bit count for field 'F'
-- want.c --
bitfield, fatal error:
	field 'F' has an invalid bit count (65), must be (0, 64]
-- want.d --
bitfield, fatal error:
	field 'F' has a malformed struct tag
-- want.e --
bitfield, fatal error:
	missing bit count for field 'F': [union=foo]