# Check we gracefully handle '-type X' when X doesn't exist.
go build -C $BITFIELD_DIR -o $TMPDIR/bitfield
! exec $TMPDIR/bitfield -in in.go -type B
! stdout .
cmp stderr want.1

# Check we handle -type X and X is an int.
go build -C $BITFIELD_DIR -o $TMPDIR/bitfield
! exec $TMPDIR/bitfield -in in.go -type C
! stdout .
cmp stderr want.2

# Check we handle -type X and X is a function type.
go build -C $BITFIELD_DIR -o $TMPDIR/bitfield
! exec $TMPDIR/bitfield -in in.go -type D
! stdout .
cmp stderr want.3


-- in.go --
package testpkg

type A struct {
	F1 uint8 `json:"f1"`
	F2 uint8 `bitfield:"3",json:"f2"`
	F3 uint16
	F4 uint8 `json:"f2",bitfield:"3"`
}

type C int
type D func() 

-- want.1 --
bitfield, fatal error:
	struct B not found
-- want.2 --
bitfield, fatal error:
	type C is not a struct
-- want.3 --
bitfield, fatal error:
	type D is not a struct